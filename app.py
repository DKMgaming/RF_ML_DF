import streamlit as st
import os
import numpy as np
import pandas as pd
from xgboost import XGBRegressor
from sklearn.ensemble import RandomForestRegressor, StackingRegressor
from sklearn.model_selection import train_test_split, RandomizedSearchCV
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import joblib
from io import BytesIO
from math import atan2, degrees, radians, sin, cos, sqrt
import folium
from streamlit_folium import st_folium
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

# --- H√†m ph·ª• cho Triangulation ---
def calculate_azimuth(lat1, lon1, lat2, lon2):
    d_lon = radians(lon2 - lon1)
    lat1 = radians(lat1)
    lat2 = radians(lat2)
    x = sin(d_lon) * cos(lat2)
    y = cos(lat1)*sin(lat2) - sin(lat1)*cos(lat2)*cos(d_lon)
    azimuth = (degrees(atan2(x, y)) + 360) % 360
    return azimuth

def calculate_distance(lat1, lon1, lat2, lon2):
    # T√≠nh kho·∫£ng c√°ch gi·ªØa 2 ƒëi·ªÉm (km)
    R = 6371.0  # B√°n k√≠nh Tr√°i ƒê·∫•t (km)
    lat1, lon1, lat2, lon2 = map(radians, [lat1, lon1, lat2, lon2])
    d_lat = lat2 - lat1
    d_lon = lon2 - lon1
    a = sin(d_lat / 2)**2 + cos(lat1) * cos(lat2) * sin(d_lon / 2)**2
    c = 2 * atan2(sqrt(a), sqrt(1 - a))
    distance = R * c
    return distance

def triangulation(lat1, lon1, az1, lat2, lon2, az2):
    # T√≠nh to√°n t·ªça ƒë·ªô ngu·ªìn ph√°t t·ª´ 2 tr·∫°m thu v√† c√°c g√≥c ph∆∞∆°ng v·ªã
    # Chuy·ªÉn ƒë·ªïi azimuth v√† t·ªça ƒë·ªô sang radian
    az1 = radians(az1)
    az2 = radians(az2)
    lat1, lon1, lat2, lon2 = map(radians, [lat1, lon1, lat2, lon2])

    # T√≠nh kho·∫£ng c√°ch gi·ªØa 2 tr·∫°m thu
    distance = calculate_distance(lat1, lon1, lat2, lon2)
    
    # C√¥ng th·ª©c ƒë·ªÉ t√≠nh to√°n t·ªça ƒë·ªô ngu·ªìn ph√°t x·∫°
    d = distance  # Kho·∫£ng c√°ch gi·ªØa 2 tr·∫°m thu
    a1 = az1  # Ph∆∞∆°ng v·ªã c·ªßa tr·∫°m thu 1
    a2 = az2  # Ph∆∞∆°ng v·ªã c·ªßa tr·∫°m thu 2

    x = (sin(a1) - sin(a2)) * d / (cos(a1) - cos(a2))
    y = (sin(a2) * cos(a1) - cos(a2) * sin(a1)) * d / (cos(a1) - cos(a2))

    # T√≠nh to√°n v·ªã tr√≠ ngu·ªìn ph√°t
    lat3 = lat1 + y / 6371.0  # ƒê·ªô vƒ© ƒë·ªô c·ªßa ngu·ªìn ph√°t
    lon3 = lon1 + x / (6371.0 * cos(lat1))  # ƒê·ªô kinh ƒë·ªô c·ªßa ngu·ªìn ph√°t

    # Chuy·ªÉn t·ªça ƒë·ªô tr·ªü l·∫°i ƒë·ªô
    lat3 = degrees(lat3)
    lon3 = degrees(lon3)
    
    return lat3, lon3

# --- Chuy·ªÉn ƒë·ªïi dBm sang dB¬µV/m ---
def dBm_to_dB¬µV_m(dBm):
    return dBm + 120  # C√¥ng th·ª©c chuy·ªÉn ƒë·ªïi t·ª´ dBm sang dB¬µV/m

def simulate_signal_strength(dist_km, h, freq_mhz):
    # Ki·ªÉm tra gi√° tr·ªã ƒë·∫ßu v√†o c·ªßa c√°c tham s·ªë ƒë·ªÉ tr√°nh l·ªói
    if dist_km <= 0 or h <= 0 or freq_mhz <= 0:
        raise ValueError("C√°c tham s·ªë dist_km, h v√† freq_mhz ph·∫£i l·ªõn h∆°n 0.")
    
    # C√¥ng th·ª©c t√≠nh t√≠n hi·ªáu v·ªõi ƒë∆°n v·ªã dBm (sau khi chuy·ªÉn ƒë·ªïi, ch√∫ng ta s·∫Ω s·ª≠ d·ª•ng dB¬µV/m)
    path_loss = 32.45 + 20 * np.log10(dist_km) + 20 * np.log10(freq_mhz)
    signal_dBm = -30 - path_loss + 10 * np.log10(h)
    
    # Chuy·ªÉn ƒë·ªïi t√≠n hi·ªáu t·ª´ dBm sang dB¬µV/m
    signal_dB¬µV_m = dBm_to_dB¬µV_m(signal_dBm)
    
    return signal_dB¬µV_m

def calculate_destination(lat1, lon1, azimuth_deg, distance_km):
    # Ki·ªÉm tra xem kho·∫£ng c√°ch c√≥ h·ª£p l·ªá kh√¥ng
    if distance_km <= 0:
        raise ValueError("Kho·∫£ng c√°ch ph·∫£i l·ªõn h∆°n 0.")
    
    # Ki·ªÉm tra c√°c gi√° tr·ªã lat1, lon1, azimuth_deg c√≥ h·ª£p l·ªá kh√¥ng
    if not (-90 <= lat1 <= 90) or not (-180 <= lon1 <= 180):
        raise ValueError("V·ªã tr√≠ t·ªça ƒë·ªô kh√¥ng h·ª£p l·ªá.")
    
    R = 6371.0  # B√°n k√≠nh Tr√°i ƒê·∫•t (km)
    brng = radians(azimuth_deg)  # Chuy·ªÉn ƒë·ªïi g√≥c ph∆∞∆°ng v·ªã sang radian
    lat1 = radians(lat1)
    lon1 = radians(lon1)
    
    # T√≠nh to√°n v·ªã tr√≠ ƒë√≠ch
    lat2 = np.arcsin(sin(lat1) * cos(distance_km / R) + cos(lat1) * sin(distance_km / R) * cos(brng))
    lon2 = lon1 + atan2(sin(brng) * sin(distance_km / R) * cos(lat1), cos(distance_km / R) - sin(lat1) * sin(lat2))

    # Chuy·ªÉn t·ªça ƒë·ªô tr·ªü l·∫°i ƒë·ªô
    lat2 = degrees(lat2)
    lon2 = degrees(lon2)
    
    return lat2, lon2  # Tr·∫£ v·ªÅ t·ªça ƒë·ªô ƒëi·ªÉm ƒë√≠ch (lat2, lon2)
def find_intersection(lat1, lon1, az1, lat2, lon2, az2):
    # T√≠nh to√°n t·ªça ƒë·ªô giao ƒëi·ªÉm gi·ªØa 2 tia t·ª´ 2 tr·∫°m thu
    az1 = radians(az1)
    az2 = radians(az2)
    lat1, lon1, lat2, lon2 = map(radians, [lat1, lon1, lat2, lon2])
    
    # T√≠nh kho·∫£ng c√°ch gi·ªØa 2 tr·∫°m thu
    distance = calculate_distance(lat1, lon1, lat2, lon2)
    
    # C√¥ng th·ª©c t√≠nh to√°n ƒëi·ªÉm giao nhau gi·ªØa 2 tia
    x = (sin(az1) - sin(az2)) * distance / (cos(az1) - cos(az2))
    y = (sin(az2) * cos(az1) - cos(az2) * sin(az1)) * distance / (cos(az1) - cos(az2))

    # T√≠nh to√°n v·ªã tr√≠ giao ƒëi·ªÉm
    lat3 = lat1 + y / 6371.0  # ƒê·ªô vƒ© ƒë·ªô c·ªßa giao ƒëi·ªÉm
    lon3 = lon1 + x / (6371.0 * cos(lat1))  # ƒê·ªô kinh ƒë·ªô c·ªßa giao ƒëi·ªÉm

    # Chuy·ªÉn t·ªça ƒë·ªô tr·ªü l·∫°i ƒë·ªô
    lat3 = degrees(lat3)
    lon3 = degrees(lon3)

    return lat3, lon3

def calculate_intersection(lat1, lon1, az1, lat2, lon2, az2):
    # Chuy·ªÉn ƒë·ªô sang radian
    theta1 = np.deg2rad(az1)
    theta2 = np.deg2rad(az2)

    # Vector h∆∞·ªõng
    dx1, dy1 = np.sin(theta1), np.cos(theta1)
    dx2, dy2 = np.sin(theta2), np.cos(theta2)

    # D·ª±ng ma tr·∫≠n h·ªá ph∆∞∆°ng tr√¨nh
    A = np.array([[dx1, -dx2], [dy1, -dy2]])
    b = np.array([lat2 - lat1, lon2 - lon1])  # ch√∫ √Ω: lat l√† y, lon l√† x

    try:
        t = np.linalg.solve(A, b)
        intersection_lat = lat1 + t[0] * dy1
        intersection_lon = lon1 + t[0] * dx1
        return intersection_lat, intersection_lon
    except np.linalg.LinAlgError:
        return None  # 2 tia song song ho·∫∑c g·∫ßn song song
def azimuth_to_vector(azimuth_deg):
    """
    Chuy·ªÉn g√≥c ph∆∞∆°ng v·ªã (ƒë·ªô) th√†nh vector h∆∞·ªõng (dx, dy) trong t·ªça ƒë·ªô ph·∫≥ng
    0 ƒë·ªô l√† B·∫Øc, 90 l√† ƒê√¥ng, 180 l√† Nam, 270 l√† T√¢y
    """
    azimuth_rad = np.deg2rad(azimuth_deg)
    dx = np.sin(azimuth_rad)
    dy = np.cos(azimuth_rad)
    return dx, dy

def compute_intersection_from_azimuths(lat1, lon1, az1, lat2, lon2, az2):
    """
    T√≠nh ƒëi·ªÉm giao gi·ªØa 2 tia t·ª´ tr·∫°m thu 1 v√† 2, theo g√≥c ph∆∞∆°ng v·ªã az1 v√† az2
    """
    x1, y1 = lon1, lat1
    dx1, dy1 = azimuth_to_vector(az1)

    x2, y2 = lon2, lat2
    dx2, dy2 = azimuth_to_vector(az2)

    A = np.array([[dx1, -dx2],
                  [dy1, -dy2]])
    b = np.array([x2 - x1, y2 - y1])

    try:
        t, s = np.linalg.solve(A, b)
        x_int = x1 + t * dx1
        y_int = y1 + t * dy1
        return y_int, x_int  # lat, lon
    except np.linalg.LinAlgError:
        return None  # Hai tia song song ho·∫∑c kh√¥ng x√°c ƒë·ªãnh giao ƒëi·ªÉm

# --- Giao di·ªán ---
st.set_page_config(layout="wide")
st.title("üî≠ D·ª± ƒëo√°n t·ªça ƒë·ªô ngu·ªìn ph√°t x·∫° theo h∆∞·ªõng ƒë·ªãnh v·ªã")

tab1, tab2 = st.tabs(["1. Hu·∫•n luy·ªán m√¥ h√¨nh", "2. D·ª± ƒëo√°n t·ªça ƒë·ªô"])

# --- Tab 1: Hu·∫•n luy·ªán ---
with tab1:
    st.subheader("üì° Hu·∫•n luy·ªán m√¥ h√¨nh v·ªõi d·ªØ li·ªáu m√¥ ph·ªèng ho·∫∑c th·ª±c t·∫ø")

    option = st.radio("Ch·ªçn ngu·ªìn d·ªØ li·ªáu hu·∫•n luy·ªán:", ("Sinh d·ªØ li·ªáu m√¥ ph·ªèng", "T·∫£i file Excel d·ªØ li·ªáu th·ª±c t·∫ø"))

    df = None  # ƒê·∫∑t m·∫∑c ƒë·ªãnh tr√°nh l·ªói NameError

    if option == "Sinh d·ªØ li·ªáu m√¥ ph·ªèng":
        if st.button("Hu·∫•n luy·ªán m√¥ h√¨nh t·ª´ d·ªØ li·ªáu m√¥ ph·ªèng"):
            st.info("ƒêang sinh d·ªØ li·ªáu m√¥ ph·ªèng...")
            np.random.seed(42)
            n_samples = 1000  # T·∫°o 1000 m·∫´u d·ªØ li·ªáu m√¥ ph·ªèng
            data = []
            for _ in range(n_samples):
                lat_tx = np.random.uniform(10.0, 21.0)
                lon_tx = np.random.uniform(105.0, 109.0)
                lat_rx = lat_tx + np.random.uniform(-0.05, 0.05)
                lon_rx = lon_tx + np.random.uniform(-0.05, 0.05)
                h_rx = np.random.uniform(2, 100)
                freq = np.random.uniform(30, 2600)

                azimuth = calculate_azimuth(lat_rx, lon_rx, lat_tx, lon_tx)
                distance = sqrt((lat_tx - lat_rx)**2 + (lon_tx - lon_rx)**2) * 111
                signal = simulate_signal_strength(distance, h_rx, freq)

                data.append({
                    "lat_receiver": lat_rx,
                    "lon_receiver": lon_rx,
                    "antenna_height": h_rx,
                    "azimuth": azimuth,
                    "frequency": freq,
                    "signal_strength": signal,  # ƒê∆°n v·ªã dB¬µV/m
                    "distance_km": distance
                })

            df = pd.DataFrame(data)
            st.success("D·ªØ li·ªáu m√¥ ph·ªèng ƒë√£ ƒë∆∞·ª£c sinh th√†nh c√¥ng!")

            # Hi·ªÉn th·ªã 5 d√≤ng ƒë·∫ßu ti√™n c·ªßa d·ªØ li·ªáu m√¥ ph·ªèng
            st.dataframe(df.head())

            # T·∫°o file Excel ƒë·ªÉ t·∫£i xu·ªëng
            towrite = BytesIO()
            df.to_excel(towrite, index=False, engine='openpyxl')
            towrite.seek(0)
            st.download_button(
                label="üì• T·∫£i d·ªØ li·ªáu m√¥ ph·ªèng (.xlsx)",
                data=towrite,
                file_name="simulation_data.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
    else:
        uploaded_data = st.file_uploader("üìÇ T·∫£i file Excel d·ªØ li·ªáu th·ª±c t·∫ø", type=["xlsx"])
        if uploaded_data:
            df = pd.read_excel(uploaded_data)
            st.success("ƒê√£ t·∫£i d·ªØ li·ªáu th·ª±c t·∫ø.")
            st.dataframe(df.head())  # Hi·ªÉn th·ªã d·ªØ li·ªáu th·ª±c t·∫ø t·∫£i l√™n
        else:
            st.info("Vui l√≤ng t·∫£i file d·ªØ li·ªáu ƒë·ªÉ hu·∫•n luy·ªán.")

    if df is not None and st.button("üîß Ti·∫øn h√†nh hu·∫•n luy·ªán m√¥ h√¨nh"):
        try:
            st.info("ƒêang hu·∫•n luy·ªán m√¥ h√¨nh...")

            # X·ª≠ l√Ω th√™m d·ªØ li·ªáu
            df['azimuth_sin'] = np.sin(np.radians(df['azimuth']))
            df['azimuth_cos'] = np.cos(np.radians(df['azimuth']))

            X = df[['lat_receiver', 'lon_receiver', 'antenna_height', 'signal_strength', 'frequency', 'azimuth_sin', 'azimuth_cos']]
            y = df[['distance_km']]

            # Chia d·ªØ li·ªáu th√†nh t·∫≠p hu·∫•n luy·ªán v√† ki·ªÉm tra
            X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

            # --- Tuning tham s·ªë v·ªõi RandomizedSearchCV ---
            param_dist = {
                'n_estimators': [100, 200, 300],  # Gi·∫£m s·ªë l∆∞·ª£ng gi√° tr·ªã tham s·ªë ƒë·ªÉ th·ª≠
                'max_depth': [3, 6, 9],  # Gi·∫£m s·ªë gi√° tr·ªã tham s·ªë
                'learning_rate': [0.05, 0.1],
                'subsample': [0.7, 0.8],
                'colsample_bytree': [0.7, 0.8]
            }

            model = XGBRegressor(random_state=42)

            # Gi·∫£m s·ªë v√≤ng l·∫∑p ƒë·ªÉ tƒÉng t·ªëc
            random_search = RandomizedSearchCV(estimator=model, param_distributions=param_dist, n_iter=5, cv=3, random_state=42)

            # Th√™m th√¥ng b√°o cho ng∆∞·ªùi d√πng khi qu√° tr√¨nh hu·∫•n luy·ªán b·∫Øt ƒë·∫ßu
            st.info("ƒêang th·ª±c hi·ªán RandomizedSearchCV ƒë·ªÉ t√¨m tham s·ªë t·ªëi ∆∞u...")

            random_search.fit(X_train, y_train.values.ravel())

            best_model = random_search.best_estimator_

            # ƒê√°nh gi√° m√¥ h√¨nh
            y_pred = best_model.predict(X_test)
            mae = mean_absolute_error(y_test, y_pred)
            rmse = np.sqrt(mean_squared_error(y_test, y_pred))
            r2 = r2_score(y_test, y_pred)

            st.success(f"Hu·∫•n luy·ªán xong - MAE kho·∫£ng c√°ch: {mae:.3f} km")
            st.success(f"RMSE: {rmse:.3f} km")
            st.success(f"R¬≤: {r2:.3f}")

            # ‚úÖ L∆∞u m√¥ h√¨nh v√†o file g·ªëc (local server)
            model_path = "distance_model_new.joblib"
            joblib.dump(best_model, model_path)

            buffer = BytesIO()
            joblib.dump(best_model, buffer)
            buffer.seek(0)
            
      
            # Cung c·∫•p n√∫t t·∫£i m√¥ h√¨nh ƒë√£ hu·∫•n luy·ªán
            st.download_button(
                label="üì• T·∫£i m√¥ h√¨nh hu·∫•n luy·ªán (.joblib)",
                data=buffer,
                file_name="distance_model.joblib",
                mime="application/octet-stream"
            )
        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh hu·∫•n luy·ªán: {e}")
            st.exception(e)

# --- Tab 2: D·ª± ƒëo√°n ---
with tab2:
    st.subheader("üìç D·ª± ƒëo√°n t·ªça ƒë·ªô ngu·ªìn ph√°t x·∫°")

    model = None
    model_path = "distance_model_2.joblib"

    # Ki·ªÉm tra file c√≥ t·ªìn t·∫°i tr√™n h·ªá th·ªëng kh√¥ng
    if os.path.exists(model_path):
        model = joblib.load(model_path)
        st.success("‚úÖ ƒê√£ t·∫£i m√¥ h√¨nh t·ª´ file local.")
    else:
        uploaded_model = st.file_uploader("üìÇ T·∫£i m√¥ h√¨nh ƒë√£ hu·∫•n luy·ªán (.joblib)", type=["joblib"])
        if uploaded_model is not None:
            with open(model_path, "wb") as f:
                f.write(uploaded_model.read())
            model = joblib.load(model_path)
            st.success("‚úÖ ƒê√£ t·∫£i m√¥ h√¨nh t·ª´ file ƒë∆∞·ª£c t·∫£i l√™n.")
        else:
            st.warning("‚ö†Ô∏è Ch∆∞a c√≥ m√¥ h√¨nh. Vui l√≤ng t·∫£i l√™n file `.joblib`.")

    # Ki·ªÉm tra n·∫øu model ƒë√£ s·∫µn s√†ng th√¨ ti·∫øp t·ª•c
    if model is not None:
        # TODO: Th√™m code ƒë·ªÉ nh·∫≠p d·ªØ li·ªáu v√† d·ª± ƒëo√°n
        st.write("S·∫µn s√†ng d·ª± ƒëo√°n...")

        uploaded_excel = st.file_uploader("üìÑ Ho·∫∑c t·∫£i file Excel ch·ª©a th√¥ng tin c√°c tr·∫°m thu", type=["xlsx"])

        if uploaded_excel:
            df_input = pd.read_excel(uploaded_excel)
            results = []
            st.session_state['intersection_points'] = []
            m = folium.Map(location=[df_input['lat_receiver'].mean(), df_input['lon_receiver'].mean()], zoom_start=8)

            for _, row in df_input.iterrows():
                az_sin = np.sin(np.radians(row['azimuth']))
                az_cos = np.cos(np.radians(row['azimuth']))
                X_input = np.array([[row['lat_receiver'], row['lon_receiver'], row['antenna_height'], row['signal_strength'], row['frequency'], az_sin, az_cos]])
                predicted_distance = model.predict(X_input)[0]
                predicted_distance = max(predicted_distance, 0.1)

                lat_pred, lon_pred = calculate_destination(row['lat_receiver'], row['lon_receiver'], row['azimuth'], predicted_distance)

                # Th√™m th√¥ng tin v·ªÅ t·∫ßn s·ªë v√† m·ª©c t√≠n hi·ªáu v√†o tooltip c·ªßa "Ngu·ªìn ph√°t d·ª± ƒëo√°n"
                folium.Marker(
                    [lat_pred, lon_pred],
                    tooltip=f"Ngu·ªìn ph√°t d·ª± ƒëo√°n\nT·∫ßn s·ªë: {row['frequency']} MHz\nM·ª©c t√≠n hi·ªáu: {row['signal_strength']} dB¬µV/m",
                    icon=folium.Icon(color='red')
                ).add_to(m)

                folium.Marker([row['lat_receiver'], row['lon_receiver']], tooltip="Tr·∫°m thu", icon=folium.Icon(color='blue')).add_to(m)
                folium.PolyLine(locations=[[row['lat_receiver'], row['lon_receiver']], [lat_pred, lon_pred]], color='green').add_to(m)

                results.append({
                    "lat_receiver": row['lat_receiver'],
                    "lon_receiver": row['lon_receiver'],
                    "lat_pred": lat_pred,
                    "lon_pred": lon_pred,
                    "predicted_distance_km": predicted_distance,
                    "frequency": row['frequency'],
                    "signal_strength": row['signal_strength']
                })


                        

            st.dataframe(pd.DataFrame(results))
            
            # T√≠nh to√°n ƒëi·ªÉm giao c·∫Øt n·∫øu c√≥ t·∫ßn s·ªë tr√πng
            if st.button("T√≠nh ƒëi·ªÉm giao c·∫Øt n·∫øu 1 t·∫ßn s·ªë ƒë∆∞·ª£c thu t·ª´ 2 tr·∫°m"):
                    frequency_groups = df_input.groupby('frequency')
                    
                    # Ki·ªÉm tra xem c√≥ √≠t nh·∫•t 2 tr·∫°m thu c√πng t·∫ßn s·ªë
                    for freq, group in frequency_groups:
                        if len(group) >= 2:
                            #st.write(f"ƒêang t√≠nh ƒëi·ªÉm giao c·∫Øt cho t·∫ßn s·ªë {freq} MHz...")
                            for i in range(len(group)):
                                for j in range(i + 1, len(group)):
                                    row1 = group.iloc[i]
                                    row2 = group.iloc[j]
                                    azimuth1 = row1['azimuth']
                                    azimuth2 = row2['azimuth']
                                    lat1, lon1 = row1['lat_receiver'], row1['lon_receiver']
                                    lat2, lon2 = row2['lat_receiver'], row2['lon_receiver']
                                    intersection_lat, intersection_lon = compute_intersection_from_azimuths(lat1, lon1, azimuth1, lat2, lon2, azimuth2)
                                    folium.Marker([intersection_lat, intersection_lon], tooltip=f"T·ªça ƒë·ªô ngu·ªìn ph√°t t·∫ßn s·ªë {freq} MHz l√† {intersection_lat:.4f},{intersection_lon:.4f}", icon=folium.Icon(color='green')).add_to(m)
                                    st.write(f"T·ªça ƒë·ªô ƒëi·ªÉm giao c·∫Øt cho t·∫ßn s·ªë {freq} MHz l√†: {intersection_lat:.4f} / {intersection_lon:.4f}")
                                    # L∆∞u ƒëi·ªÉm giao c·∫Øt v√†o session_state
                                    st.session_state['intersection_points'].append((intersection_lat, intersection_lon))

                    # Hi·ªÉn th·ªã ƒëi·ªÉm giao c·∫Øt tr√™n b·∫£n ƒë·ªì
                    #for lat, lon in st.session_state['intersection_points']:
                        #folium.Marker([lat, lon], tooltip="ƒêi·ªÉm giao c·∫Øt", icon=folium.Icon(color='green')).add_to(m)
                        #st.write(f"T·ªça ƒë·ªô ngu·ªìn ph√°t t·∫ßn s·ªë {freq} MHz l√† {lat:.4f},{lon:.4f}...")
            with st.container():
                st_folium(m, width=1300, height=500, returned_objects=[])
            #st_folium(m, width=1300, height=500)
        else:
            with st.form("input_form"):
                lat_rx = st.number_input("Vƒ© ƒë·ªô tr·∫°m thu", value=21.339)
                lon_rx = st.number_input("Kinh ƒë·ªô tr·∫°m thu", value=105.4056)
                h_rx = st.number_input("Chi·ªÅu cao anten (m)", value=30.0)
                signal = st.number_input("M·ª©c t√≠n hi·ªáu thu (dB¬µV/m)", value=50.0)  # ƒê∆°n v·ªã dB¬µV/m
                freq = st.number_input("T·∫ßn s·ªë (MHz)", value=900.0)
                azimuth = st.number_input("G√≥c ph∆∞∆°ng v·ªã (ƒë·ªô)", value=45.0)
                submitted = st.form_submit_button("üîç D·ª± ƒëo√°n t·ªça ƒë·ªô ngu·ªìn ph√°t")

            if submitted:
                az_sin = np.sin(np.radians(azimuth))
                az_cos = np.cos(np.radians(azimuth))
                X_input = np.array([[lat_rx, lon_rx, h_rx, signal, freq, az_sin, az_cos]])
                predicted_distance = model.predict(X_input)[0]
                predicted_distance = max(predicted_distance, 0.1)

                lat_pred, lon_pred = calculate_destination(lat_rx, lon_rx, azimuth, predicted_distance)

                st.success("üéØ T·ªça ƒë·ªô ngu·ªìn ph√°t x·∫° d·ª± ƒëo√°n:")
                st.markdown(f"- **Vƒ© ƒë·ªô**: `{lat_pred:.6f}`")
                st.markdown(f"- **Kinh ƒë·ªô**: `{lon_pred:.6f}`")
                st.markdown(f"- **Kho·∫£ng c√°ch d·ª± ƒëo√°n**: `{predicted_distance:.2f} km`")

                m = folium.Map(location=[lat_rx, lon_rx], zoom_start=10)
                folium.Marker([lat_rx, lon_rx], tooltip="Tr·∫°m thu", icon=folium.Icon(color='blue')).add_to(m)
                folium.Marker(
                    [lat_pred, lon_pred],
                    tooltip=f"Ngu·ªìn ph√°t d·ª± ƒëo√°n\nT·∫ßn s·ªë: {freq} MHz\nM·ª©c t√≠n hi·ªáu: {signal} dB¬µV/m",
                    icon=folium.Icon(color='red')
                ).add_to(m)
                folium.PolyLine(locations=[[lat_rx, lon_rx], [lat_pred, lon_pred]], color='green').add_to(m)

                with st.container():
                    st_folium(m, width=1300, height=500, returned_objects=[])
